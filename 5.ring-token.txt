create file named token-ring.py

import threading
import time

class TokenRingMutex:
    def __init__(self, n):
        self.tokens = [threading.Event() for _ in range(n)]
        self.tokens[0].set()
        self.n = n
        self.queue = []
        
    def request_critical_section(self):
        self.queue.append(threading.current_thread().ident)
        while True:
            token_idx = self.queue.index(threading.current_thread().ident)
            self.tokens[token_idx % self.n].wait()
            if token_idx == 0:
                return
            
    def release_critical_section(self):
        token_idx = self.queue.index(threading.current_thread().ident)
        self.tokens[(token_idx + 1) % self.n].set()
        self.queue.remove(threading.current_thread().ident)

def worker(mutex, id):
    while True:
        print("Worker" +str(id)+" is outside the critical section")
        mutex.request_critical_section()
        print("Worker" +str(id)+" is inside the critical section")
        time.sleep(1)
        mutex.release_critical_section()

if __name__ == "__main__":
    mutex = TokenRingMutex(3)
    workers = []
    for i in range(3):
        worker_thread = threading.Thread(target=worker, args=(mutex, i))
        workers.append(worker_thread)
        worker_thread.start()
    
    for worker_thread in workers:
        worker_thread.join()







run the command "python3 token-ring.py"




//explain




The code implements a Token Ring Mutex algorithm using Python's threading module. It simulates a token-based mutual exclusion mechanism among multiple worker threads. Here's a summary:

- The code defines a class `TokenRingMutex` that represents the token ring mutex. It initializes a list of tokens (threading events) and a queue to track the order of thread requests. The first token is initially set, and the number of tokens is determined by the parameter `n`.

- The `request_critical_section` method is used by worker threads to request access to the critical section. It adds the thread's identifier to the queue and waits for its corresponding token to become available.

- The `release_critical_section` method releases the token held by the current thread and passes it to the next thread in the queue.

- The `worker` function represents the behavior of worker threads. It continuously requests the critical section, enters it, performs some work (sleeps for 1 second in this case), and then releases the critical section.

- In the main block, an instance of `TokenRingMutex` is created with `n=3` tokens. Three worker threads are created, each associated with a worker function and the mutex instance. The threads are started and joined.

- Each worker thread repeatedly requests and releases the critical section, simulating the token-based synchronization mechanism.

Overall, the code demonstrates the implementation of a Token Ring Mutex algorithm using threads. It ensures that only one worker thread can access the critical section at a time based on the availability of tokens in the token ring.