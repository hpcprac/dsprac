create 4 files with names ReverseModule.idl,ReverseImpl.java,ReverseServer.java,ReverseClient.java






name of the file - ReverseModule.idl

//To develop any distributed application with CORBA program using JAVA IDL.

module ReverseModule //module ReverseModule is the name of the module
{
 interface Reverse
 {
 string reverse_string(in string str);
 };
};







name of the file - ReverseImpl.java


import ReverseModule.ReversePOA;
import java.lang.String;
class ReverseImpl extends ReversePOA
{

 ReverseImpl()
 {
 super();
 System.out.println("Reverse Object Created");
 }
 public String reverse_string(String name)
 {
 StringBuffer str=new StringBuffer(name); 
 str.reverse();
 return (("Server Send "+str));
 }
}




name of the file -ReverseClient.java


import ReverseModule.*;
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import java.io.*;
class ReverseClient
{
 
 public static void main(String args[])
 {
 Reverse ReverseImpl=null;
 
 try
 {
 // initialize the ORB
 org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init(args,null);
 org.omg.CORBA.Object objRef = 
orb.resolve_initial_references("NameService");
 NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
 
 String name = "Reverse";
 //Helper class provides narrow method that cast corba object reference  (ref) into the java interface
 // System.out.println("Step2");
 // Look ups "Reverse" in the naming context
 ReverseImpl = ReverseHelper.narrow(ncRef.resolve_str(name));
 System.out.println("Enter String=");
 BufferedReader br = new BufferedReader(new 
InputStreamReader(System.in));
 String str= br.readLine();
 String tempStr= ReverseImpl.reverse_string(str);
 
 System.out.println(tempStr);
 }
 catch(Exception e)
 {
 e.printStackTrace();
 }
 }
}











name of the file -ReverseServer.java


import ReverseModule.Reverse;
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import org.omg.PortableServer.*;
class ReverseServer
{
 public static void main(String[] args)
 {
 try
 {
 // initialize the ORB
 org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init(args,null);
 // initialize the portable object adaptor (BOA/POA) connects client request using object reference
 //uses orb method as resolve_initial_references
 POA rootPOA = 
POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
 rootPOA.the_POAManager().activate();
 // creating an object of ReverseImpl class
 
 ReverseImpl rvr = new ReverseImpl();
 //server consist of 2 classes ,servent and server. The servent is the subclass of ReversePOA which is generated by the idlj compiler

 // The servent ReverseImpl is the implementation of the ReverseModule  idl interface
 // get the object reference from the servant class
 //use root POA class and its method servant_to_reference
 org.omg.CORBA.Object ref = rootPOA.servant_to_reference(rvr);
 // System.out.println("Step1");
 Reverse h_ref = ReverseModule.ReverseHelper.narrow(ref);
 // Helper class provides narrow method that cast corba object reference (ref) into the java interface
 // System.out.println("Step2");
 // orb layer uses resolve_initial_references method to take initial  reference as NameService
 org.omg.CORBA.Object objRef = 
orb.resolve_initial_references("NameService");
 //Register new object in the naming context under the Reverse
 // System.out.println("Step3");
 NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
 //System.out.println("Step4");
 String name = "Reverse";
 NameComponent path[] = ncRef.to_name(name);
 ncRef.rebind(path,h_ref);
 //Server run and waits for invocations of the new object from the client
 System.out.println("Reverse Server reading and waiting....");
 orb.run();
 }
 catch(Exception e)
 {
 e.printStackTrace();
 }
 }
}





1: make all files needed (ReverseModule.idl,ReverseImpl.java,ReverseServer.java,ReverseClient.java)
2: now run command  "idlj -fall ReverseModule.idl"
3: run command javac *.java /ReverseModule/*.java
4: run command tnameserv -ORBInitialPort 3000
5: Open new terminal and run the command "java ReverseServer -ORBInitialPort 3000 -ORBInitialHost localhost"
6: Again open new terminal and run the command "java ReverseClient -ORBInitialPort 3000 -ORBInitialHost localhost"





//explaination

for reversemodule.idl

The code defines a module named "ReverseModule" with an interface named "Reverse." The interface has a single operation called "reverse_string" that takes a string as input and returns the reversed version of the input string. This code is intended for developing a distributed application using CORBA and Java IDL, where the reverse_string operation can be invoked remotely.




for ReverseClient.java