create 4 files with names ReverseModule.idl,ReverseImpl.java,ReverseServer.java,ReverseClient.java






name of the file - ReverseModule.idl

//To develop any distributed application with CORBA program using JAVA IDL.

module ReverseModule //module ReverseModule is the name of the module
{
 interface Reverse
 {
 string reverse_string(in string str);
 };
};







name of the file - ReverseImpl.java


import ReverseModule.ReversePOA;
import java.lang.String;
class ReverseImpl extends ReversePOA
{

 ReverseImpl()
 {
 super();
 System.out.println("Reverse Object Created");
 }
 public String reverse_string(String name)
 {
 StringBuffer str=new StringBuffer(name); 
 str.reverse();
 return (("Server Send "+str));
 }
}




name of the file -ReverseClient.java


import ReverseModule.*;
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import java.io.*;
class ReverseClient
{
 
 public static void main(String args[])
 {
 Reverse ReverseImpl=null;
 
 try
 {
 // initialize the ORB
 org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init(args,null);
 org.omg.CORBA.Object objRef = 
orb.resolve_initial_references("NameService");
 NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
 
 String name = "Reverse";
 //Helper class provides narrow method that cast corba object reference  (ref) into the java interface
 // System.out.println("Step2");
 // Look ups "Reverse" in the naming context
 ReverseImpl = ReverseHelper.narrow(ncRef.resolve_str(name));
 System.out.println("Enter String=");
 BufferedReader br = new BufferedReader(new 
InputStreamReader(System.in));
 String str= br.readLine();
 String tempStr= ReverseImpl.reverse_string(str);
 
 System.out.println(tempStr);
 }
 catch(Exception e)
 {
 e.printStackTrace();
 }
 }
}











name of the file -ReverseServer.java


import ReverseModule.Reverse;
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import org.omg.PortableServer.*;
class ReverseServer
{
 public static void main(String[] args)
 {
 try
 {
 // initialize the ORB
 org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init(args,null);
 // initialize the portable object adaptor (BOA/POA) connects client request using object reference
 //uses orb method as resolve_initial_references
 POA rootPOA = 
POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
 rootPOA.the_POAManager().activate();
 // creating an object of ReverseImpl class
 
 ReverseImpl rvr = new ReverseImpl();
 //server consist of 2 classes ,servent and server. The servent is the subclass of ReversePOA which is generated by the idlj compiler

 // The servent ReverseImpl is the implementation of the ReverseModule  idl interface
 // get the object reference from the servant class
 //use root POA class and its method servant_to_reference
 org.omg.CORBA.Object ref = rootPOA.servant_to_reference(rvr);
 // System.out.println("Step1");
 Reverse h_ref = ReverseModule.ReverseHelper.narrow(ref);
 // Helper class provides narrow method that cast corba object reference (ref) into the java interface
 // System.out.println("Step2");
 // orb layer uses resolve_initial_references method to take initial  reference as NameService
 org.omg.CORBA.Object objRef = 
orb.resolve_initial_references("NameService");
 //Register new object in the naming context under the Reverse
 // System.out.println("Step3");
 NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
 //System.out.println("Step4");
 String name = "Reverse";
 NameComponent path[] = ncRef.to_name(name);
 ncRef.rebind(path,h_ref);
 //Server run and waits for invocations of the new object from the client
 System.out.println("Reverse Server reading and waiting....");
 orb.run();
 }
 catch(Exception e)
 {
 e.printStackTrace();
 }
 }
}





1: make all files needed (ReverseModule.idl,ReverseImpl.java,ReverseServer.java,ReverseClient.java)
2: now run command  "idlj -fall ReverseModule.idl"
3: run command javac *.java /ReverseModule/*.java
4: run command tnameserv -ORBInitialPort 3000
5: Open new terminal and run the command "java ReverseServer -ORBInitialPort 3000 -ORBInitialHost localhost"
6: Again open new terminal and run the command "java ReverseClient -ORBInitialPort 3000 -ORBInitialHost localhost"





//explaination

for reversemodule.idl

The code defines a module named "ReverseModule" with an interface named "Reverse." The interface has a single operation called "reverse_string" that takes a string as input and returns the reversed version of the input string. This code is intended for developing a distributed application using CORBA and Java IDL, where the reverse_string operation can be invoked remotely.




for ReverseClient.java

The code is a Java client application that interacts with a remote server implementing the "Reverse" interface defined in the "ReverseModule" module.

In summary, the client performs the following tasks:

1. Imports the required packages and classes.

2. Defines a class named "ReverseClient."

3. In the main method, it initializes the CORBA ORB (Object Request Broker) and obtains a reference to the Naming Service, which is used to locate objects by name.

4. It looks up the object named "Reverse" in the Naming Service using the narrow method to obtain a reference to the remote object implementing the "Reverse" interface.

5. Prompts the user to enter a string.

6. Calls the `reverse_string` method on the remote object, passing the user's input string as a parameter.

7. Displays the reversed string returned by the remote object.

8. Handles any exceptions that may occur during the execution.

In essence, this Java client application connects to a remote server, sends a string to be reversed, and displays the reversed string returned by the server.




for reversempl.java
The code is a Java class named "ReverseImpl.java" that implements the functionality of the "reverse_string" method defined in the "Reverse" interface.

In summary, the class performs the following tasks:

1. Defines a class named "ReverseImpl" that extends the generated "ReversePOA" class.

2. Implements the "reverse_string" method, which takes a string as input.

3. Creates a StringBuffer object from the input string, reverses it using the reverse() method, and returns the reversed string with a prefixed message.

4. Includes a constructor that prints a message when a Reverse object is created.

In essence, this Java class provides the server-side implementation of the "reverse_string" operation, which takes a string as input, reverses it, and returns the reversed string with a prefixed message.




ReverseServer.java


The code is a Java server application that provides the implementation for the "Reverse" interface and registers it with the Naming Service.

In summary, the server performs the following tasks:

1. Imports the required packages and classes.

2. Defines a class named "ReverseServer."

3. In the main method, it initializes the CORBA ORB (Object Request Broker).

4. Initializes the Portable Object Adapter (POA) and activates the POA manager.

5. Creates an instance of the ReverseImpl class, which implements the functionality of the "Reverse" interface.

6. Converts the ReverseImpl object to a CORBA object reference using the root POA's servant_to_reference method.

7. Obtains the Naming Service object reference using the ORB's resolve_initial_references method.

8. Narrows the Naming Service object reference to the NamingContextExt type.

9. Binds the Reverse object reference to a name in the Naming Service.

10. Prints a message indicating that the Reverse Server is running and waiting for client invocations.

11. Starts the ORB, which makes the server listen for client requests.

In essence, this Java server application registers the implementation of the "Reverse" interface with the Naming Service and listens for client invocations on the registered object.





